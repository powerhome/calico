# Generated by confd
function reject_disabled_pools ()
{
{{range ls "/v1/ipam/v4/pool"}}{{$data := json (getv (printf "/v1/ipam/v4/pool/%s" .))}}
{{- if $data.disableBGPExport}}
  if ( net ~ {{$data.cidr}} ) then { reject; }
{{- end}}
{{- end}}
}

{{- $node_as_key := printf "/host/%s/as_num" (getenv "NODENAME")}}
{{- $as_key := or (and (exists $node_as_key) $node_as_key) "/global/as_num"}}
{{- $node_as_num := getv $as_key}}
function reject_transit ()
{
  if (defined(bgp_path)) then {
    if (bgp_path.last != {{$node_as_num}}) then {
      reject;
    }
  }
}

function export_static ()
{
{{- $static_key := "/staticroutes"}}
{{- if ls $static_key}}

  # Export static routes.
  {{- range ls $static_key}}
    {{- $parts := split . "-"}}
    {{- $cidr := join $parts "/"}}
  if ( net ~ {{$cidr}} ) then { accept; }
  {{- end}}
{{- end}}
}

function export_pools ()
{
{{range ls "/v1/ipam/v4/pool"}}{{$data := json (getv (printf "/v1/ipam/v4/pool/%s" .))}}
{{- if $data.disableBGPExport}}
  # Skip {{$data.cidr}} as BGP export is disabled for it
{{- else}}
  if ( net ~ {{$data.cidr}} ) then {
    accept;
  }
{{- end}}
{{- end}}
}

function reject_default_route()
{
  if (net = 0.0.0.0/0) then {
    reject;
  }
}

function reject_bogons()
{
  # Loopback range
  if (net ~ 127.0.0.0/8) then {
    reject;
  }

  # Multicast range
  if (net ~ 224.0.0.0/4) then {
    reject;
  }

  # Link-local range
  if (net ~ 169.254.0.0/16) then {
    reject;
  }

  # CGNAT range
  if (net ~ 100.64.0.0/10) then {
    reject;
  }
}

filter calico_import_from_bgp_peers {
  reject_default_route();
  reject_bogons();
  accept;
}

filter calico_export_to_bgp_peers {
  reject_default_route();
  reject_bogons();

  # NOTICE: Use "nodeSelector: !all()" instead of setting "disabled: true" in
  # order to use IPPools to define which encapsulation method (if any) shall be
  # used for the given route.
  reject_disabled_pools();

  apply_communities();
  calico_aggr(); # Summarization

  # Export routes programmed into BGPConfiguration:
  # service{Cluster,External,LoadBalancer}IPs and generic prefixAdvertisements.
  export_static();

  # Filter out further propagation of routes redistributed to this node which
  # haven't originated from this AS nor are static.
  reject_transit();

  export_pools();

  reject; # Catch-all reject
}

{{$network_key := printf "/bgp/v1/host/%s/network_v4" (getenv "NODENAME")}}
filter calico_kernel_programming {
{{- $reject_key := "/rejectcidrs"}}
{{- if ls $reject_key}}

  # Don't program static routes into kernel.
  {{- range ls $reject_key}}
    {{- $parts := split . "-"}}
    {{- $cidr := join $parts "/"}}
  if ( net ~ {{$cidr}} ) then { reject; }
  {{- end}}

{{- end}}
{{- if exists $network_key}}{{$network := getv $network_key}}
{{range ls "/v1/ipam/v4/pool"}}{{$data := json (getv (printf "/v1/ipam/v4/pool/%s" .))}}
  if ( net ~ {{$data.cidr}} ) then {
{{- if $data.vxlan_mode}}
    # Don't program VXLAN routes into the kernel - these are handled by Felix.
    reject;
  }
{{- else if $data.ipip_mode}}{{if eq $data.ipip_mode "cross-subnet"}}
    if defined(bgp_next_hop) && ( bgp_next_hop ~ {{$network}} ) then
      krt_tunnel = "";                     {{- /* Destination in ipPool, mode is cross sub-net, route from-host on subnet, do not use IPIP */}}
    else
      krt_tunnel = "{{$data.ipip}}";       {{- /* Destination in ipPool, mode is cross sub-net, route from-host off subnet, set the tunnel (if IPIP not enabled, value will be "") */}}
    accept;
  } {{- else}}
    krt_tunnel = "{{$data.ipip}}";         {{- /* Destination in ipPool, mode not cross sub-net, set the tunnel (if IPIP not enabled, value will be "") */}}
    accept;
  } {{- end}} {{- else}}
    krt_tunnel = "{{$data.ipip}}";         {{- /* Destination in ipPool, mode field is not present, set the tunnel (if IPIP not enabled, value will be "") */}}
    accept;
  } {{- end}}
{{end}}
{{- end}}{{/* End of 'exists $network_key' */}}
  accept;                                  {{- /* Destination is not in any ipPool, accept  */}}
}
